
1 好的教程
{
	https://zhuanlan.zhihu.com/p/105029905

	https://mp.weixin.qq.com/s?__biz=MzU5MjQ1NTEwOA==&mid=2247493316&idx=1&sn=7e4fef834a8066faca3d2f1f1a090bb4&chksm=fe1dd26fc96a5b79856840f556cf65026facb83520ac1891605e42d5e777d30a0d5219060e21&mpshare=1&scene=1&srcid=0606YJLYnfprk9UjpPQCnre1#rd

	https://zhuanlan.zhihu.com/p/380124248

	https://zhuanlan.zhihu.com/p/144851154

	-- 一个简单的基于官方改造的例子 TODO
	https://gitee.com/ralphylee/unity-avatar-mask-and-animation-layers

	一个视频介绍，动画框架的 TODO
	https://www.bilibili.com/video/BV1SP4y177YQ?spm_id_from=333.337.top_right_bar_window_custom_collection.content.click

	Animance 插件 TODO
}


TimeLine
{
	https://zhuanlan.zhihu.com/p/488738592
	https://www.233tw.com/unity/36598
}


勾选“Bake into Pose” ==》body Transform
不勾选“Bake into Pose”，勾选“Apply Root Motion” ==> 变换是作为Root Transform，所以因为这里勾选了Apply Root Motion，变换会应用到模型
不勾选“Bake into Pose”，不勾选“Apply Root Motion”==> 这里变化还是作为Root Transform，但是因为没有勾选Apply Root Motion，所以变换将不被应用，所以模型将一直在原地
https://blog.csdn.net/chy555chy/article/details/78843808

Animance笔记部分
{
	1 给动作加事件
	{
		####1 如果只有一个动作，事件不会清除，需要手动清除，否则会每帧调用，底层是根据时间判断 prepareframe里调用，根据时间统计的
		####2 如果事件处理逻辑里会切换到其他动作，上一个动作的事件就不会继续调用，但是再次切回到上个动作后，事件还是会处理
		3 正向播放和倒着播放都会触发事件
		4 每当我们播放新动画时，所有这些AnimancerState.Events通常都会被清除，
		  所以如果要想某个动作有事件
		  {
			如果是使用_Animancer.Play(_AnimationClip)方式播放，需要每次都设置事件  
				 AnimancerState state = _Animancer.Play(_Animation);
				state.Events.OnEnd = PlayEnd;
				
			如果是使用_Animancer.Play(ClipTransition) 方式播放，就只需要给ClipTransition注册事件（注册一次就行），之后每次播放都会触发事件
					_Action.Events.OnEnd = OnActionEnd; //_Action是ClipTransition类型
		  }
		  
		  
		  调用AnimancerComponent.Play或Stop会自动清除所有状态的事件，除非AnimancerState.AutomaticallyClearEvents设置为false
		  
		   _GolfSwing.Events.SetCallback("Hit", HitBall); ==> 编辑器下设置帧事件名称，代码里设置回调
		   
		 
		   End Event 每一帧都调用
		   {
				在动画经过指定时间后的每一帧上，无论动画是否循环。
				On every frame when the animation has passed the specified time, regardless of whether the animation is looping or not.
				
				 //OnEnd事件 不管动作是否循环，只要时间超过动画长度就会每帧调用
		   }
		   
		   更改AnimancerState.Time（或NormalizedTime）可防止该状态在该帧期间触发任何更多事件。如果您希望触发旧时间和新时间之间的事件，可以改用AnimancerState.MoveTime
		   
	}
	
	2 根据一个AnimationClip 返回AnimancerState，==》 var state = _Animancer.States[_Open];
	==》 _Animancer.States.Current 获取当前的AnimancerState
	{
	  public readonly StateMachine<CharacterState>.WithDefault
            StateMachine = new StateMachine<CharacterState>.WithDefault();
			
		//通过状态机获取当前状态
		StateMachine.CurrentState
	}
	
	3 暂停播放，让动作卡在第一帧
	{
			// 让动作卡在第一帧 _WakeUp为ClipTransition
            _Animancer.Play(_WakeUp); 
            _Animancer.Playable.PauseGraph(); //暂停动画更新
            _Animancer.Evaluate(); //手动调度
			
			
			_Animancer.Playable.UnpauseGraph(); //恢复动画更新
	}
	
	4 倒着播放
	{ 
			//倒着播 _WakeUp为ClipTransition
            var state = _Animancer.Play(_WakeUp);
            state.Speed = -1;

            //state.Weight == 0   动画还没播放
            if (state.Weight == 0 || state.NormalizedTime > 1)
            {
                state.NormalizedTime = 1;
            }
	}
	
	5 控制动画刷新帧率
	{
		要阻止 Unity 正常更新动画，请调用animancerComponent.Playable.PauseGraph();.
		要手动更新动画，请调用animancerComponent.Evaluate(deltaTime);
		
		以较低的速率更新动画也会影响动画事件和Animancer 事件
	}
	
	6 自定义过渡数据
	{
		[Serializable]
        public class MotionTransition : ClipTransition
        {
            /************************************************************************************************************************/

            [SerializeField, Tooltip("Should Root Motion be enabled when this animation plays?")]
            private bool _ApplyRootMotion;

            /************************************************************************************************************************/

            public override void Apply(AnimancerState state)
            {
                base.Apply(state);
                state.Root.Component.Animator.applyRootMotion = _ApplyRootMotion;
            }

            /************************************************************************************************************************/
        }
	}
	
	7 动作时从头开始播放还是从上次最后的位置播放
	{
		开始时间
			动画Idle的Start Time切换未勾选，这意味着如果它已经在播放，它将简单地从当前时间继续。这将使用默认的FadeMode.FixedSpeed.
			动画Action的Start Time切换被勾选，这意味着当您播放它时它将始终设置为指定值（在本例中为 0）。FadeMode.FromStart这将按照上面描述的方式使用（在快速射击部分）。
	}
	
	8 状态缓冲==》另一种用状态机切换状态的方式
	{
	
		
        [SerializeField, Seconds] private float _InputTimeOut = 0.5f;
		
		//创建一个状态缓冲
        _InputBuffer = new StateMachine<CharacterState>.InputBuffer(_Character.StateMachine);
			
		private void Update()
        {
        
            _InputBuffer.Update();
        }
		
		 //使用缓冲 切换到装备状态, 并不会立即执行，等到_InputTimeOut结束才执行
		//Doesn't actually attempt to enter the state until <see cref="Update(float)"/> is called.
		_InputBuffer.Buffer(_Equip, _InputTimeOut);
		
		TrySetState(state) ==> 如果切换失败就不继续尝试了
		_InputBuffer(state, timeOut) ==》如果切换失败，会临时存储state，在一段时间内继续尝试切换

	}
	
	9 在Animance中使用Animator
	{
		_Animancer.Animator
		
		HybridAnimancerComponent ==》 这个组件可以用Animancer改造Animator ，可以播放controle内部定义的动作  好东西，基本接口都保持一致了
		{
			 HybridAnimancer.PlayController(); //调用AnimatorContoller
		}
		
		使用Animance播放其他动作
		https://kybernetik.com.au/animancer/docs/manual/animator-controllers/
	}
	
	10 SpriteRender组件也能使用Animance控制，播放精灵帧动画，同时也要使用Animator组件
	
	
	还是多看看文档吧 https://kybernetik.com.au/animancer/docs/manual/
}